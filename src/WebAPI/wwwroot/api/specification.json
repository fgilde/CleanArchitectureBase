{
  "x-generator": "NSwag v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "CleanArchitectureBase Web API",
    "description": "API to use CleanArchitectureBase",
    "contact": {
      "name": "Florian Gilde",
      "url": "http://www.gilde.org",
      "email": "info@gilde.org"
    },
    "license": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "version": "2.0"
  },
  "paths": {
    "/MyEntity/Index": {
      "get": {
        "tags": [
          "MyEntity"
        ],
        "operationId": "MyEntity_Index",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/MyEntity/Create/{name}": {
      "get": {
        "tags": [
          "MyEntity"
        ],
        "operationId": "MyEntity_Create",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyEntity"
                }
              }
            }
          }
        }
      }
    },
    "/MyEntity/Delete/{id}": {
      "get": {
        "tags": [
          "MyEntity"
        ],
        "operationId": "MyEntity_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/System/Version": {
      "get": {
        "tags": [
          "System"
        ],
        "operationId": "System_Version",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionInfoModel"
                }
              }
            }
          }
        }
      }
    },
    "/System/AvailableApiVersions": {
      "get": {
        "tags": [
          "System"
        ],
        "operationId": "System_AvailableApiVersions",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/System/SendOnServiceBus/{queue}": {
      "post": {
        "tags": [
          "System"
        ],
        "operationId": "System_SendOnServiceBus",
        "parameters": [
          {
            "name": "queue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "entity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MyEntity"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/WeatherForecast/Weather": {
      "get": {
        "tags": [
          "WeatherForecast"
        ],
        "summary": "Returns the weather forecast",
        "operationId": "WeatherForecast_Get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "MyEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditableEntity"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "nullable": true
              },
              "domainEvents": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/DomainEvent"
                }
              }
            }
          }
        ]
      },
      "DomainEvent": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "isPublished": {
            "type": "boolean"
          },
          "dateOccurred": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AuditableEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "created": {
                "type": "string",
                "format": "date-time"
              },
              "createdBy": {
                "type": "string",
                "nullable": true
              },
              "lastModified": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "lastModifiedBy": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "EntityBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "VersionInfoModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "application": {
            "type": "string",
            "nullable": true
          },
          "runtime": {
            "type": "string",
            "nullable": true
          },
          "system": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "WeatherForecast": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "temperatureC": {
            "type": "integer",
            "format": "int32"
          },
          "temperatureF": {
            "type": "integer",
            "format": "int32"
          },
          "summary": {
            "type": "string",
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "apiKey",
        "description": "Type into the textbox: Bearer {your JWT token}.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "JWT": []
    }
  ]
}